Author: Adam Majer <amajer@suse.de>
Date: Dec 20 09:18:49 UTC 2017
Summary: Fix CI unit tests framework for OBS building

Index: node-v10.11.0/test/parallel/test-module-loading-globalpaths.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-module-loading-globalpaths.js
+++ node-v10.11.0/test/parallel/test-module-loading-globalpaths.js
@@ -11,6 +11,9 @@ const { addLibraryPath } = require('../c
 
 addLibraryPath(process.env);
 
+common.skip('hardcoded global paths');
+return;
+
 if (process.argv[2] === 'child') {
   console.log(require(pkgName).string);
 } else {
Index: node-v10.11.0/Makefile
===================================================================
--- node-v10.11.0.orig/Makefile
+++ node-v10.11.0/Makefile
@@ -460,7 +460,7 @@ test-ci-js: | clear-stalled
 .PHONY: test-ci
 # Related CI jobs: most CI tests, excluding node-test-commit-arm-fanned
 test-ci: LOGLEVEL := info
-test-ci: | clear-stalled build-addons build-addons-napi doc-only
+test-ci: | clear-stalled build-addons build-addons-napi
 	out/Release/cctest --gtest_output=tap:cctest.tap
 	$(PYTHON) tools/test.py $(PARALLEL_ARGS) -p tap --logfile test.tap \
 		--mode=$(BUILDTYPE_LOWER) --flaky-tests=$(FLAKY_TESTS) \
@@ -616,11 +616,11 @@ apidocs_json = $(addprefix out/,$(apidoc
 apiassets = $(subst api_assets,api/assets,$(addprefix out/,$(wildcard doc/api_assets/*)))
 
 tools/doc/node_modules: tools/doc/package.json
-ifeq ($(node_use_openssl),true)
-	cd tools/doc && $(call available-node,$(run-npm-ci))
-else
-	@echo "Skipping tools/doc/node_modules (no crypto)"
-endif
+#ifeq ($(node_use_openssl),true)
+#	cd tools/doc && $(call available-node,$(run-npm-ci))
+#else
+	@echo "Skipping tools/doc/node_modules - on purpose"
+#endif
 
 .PHONY: doc-only
 doc-only: tools/doc/node_modules \
Index: node-v10.11.0/test/parallel/test-tls-env-bad-extra-ca.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-tls-env-bad-extra-ca.js
+++ node-v10.11.0/test/parallel/test-tls-env-bad-extra-ca.js
@@ -36,7 +36,7 @@ fork(__filename, opts)
     // TODO(addaleax): Make `SafeGetenv` work like `process.env`
     // encoding-wise
     if (!common.isWindows) {
-      const re = /Warning: Ignoring extra certs from.*no-such-file-exists-🐢.* load failed:.*No such file or directory/;
+      const re = /Warning: Ignoring extra certs from.*no-such-file-exists-.* load failed:.*/;
       assert(re.test(stderr), stderr);
     }
   }))
Index: node-v10.11.0/test/parallel/test-tls-passphrase.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-tls-passphrase.js
+++ node-v10.11.0/test/parallel/test-tls-passphrase.js
@@ -221,7 +221,7 @@ server.listen(0, common.mustCall(functio
   }, common.mustCall());
 })).unref();
 
-const errMessagePassword = /bad decrypt/;
+const errMessagePassword = /bad (decrypt|password read)/;
 
 // Missing passphrase
 assert.throws(function() {
Index: node-v10.11.0/test/parallel/test-crypto-scrypt.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-crypto-scrypt.js
+++ node-v10.11.0/test/parallel/test-crypto-scrypt.js
@@ -167,7 +167,7 @@ for (const options of bad) {
 
 for (const options of toobig) {
   const expected = {
-    message: /error:[^:]+:digital envelope routines:EVP_PBE_scrypt:memory limit exceeded/,
+    message: /(error:[^:]+:digital envelope routines:EVP_PBE_scrypt:memory limit exceeded|Invalid scrypt parameter)/,
     type: Error,
   };
   common.expectsError(() => crypto.scrypt('pass', 'salt', 1, options, () => {}),
Index: node-v10.11.0/test/parallel/test-repl-envvars.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-repl-envvars.js
+++ node-v10.11.0/test/parallel/test-repl-envvars.js
@@ -2,12 +2,14 @@
 
 // Flags: --expose-internals
 
-require('../common');
+const common = require('../common');
 const stream = require('stream');
 const REPL = require('internal/repl');
 const assert = require('assert');
 const inspect = require('util').inspect;
 
+common.skip('Not running test in OBS');
+
 const tests = [
   {
     env: {},
Index: node-v10.11.0/test/parallel/test-fs-utimes.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-fs-utimes.js
+++ node-v10.11.0/test/parallel/test-fs-utimes.js
@@ -186,8 +186,8 @@ process.on('exit', () => {
 const path = `${tmpdir.path}/test-utimes-precision`;
 fs.writeFileSync(path, '');
 
-// test Y2K38 for all platforms [except 'arm', 'OpenBSD' and 'SunOS']
-if (!process.arch.includes('arm') && !common.isOpenBSD && !common.isSunOS) {
+// test Y2K38 for all platforms [except 'arm', 's390', 'OpenBSD' and 'SunOS']
+if (!process.arch.includes('arm') && process.arch !== 's390' && !common.isOpenBSD && !common.isSunOS) {
   // because 2 ** 31 doesn't look right
   // eslint-disable-next-line space-infix-ops
   const Y2K38_mtime = 2**31;
Index: node-v10.11.0/test/parallel/test-trace-events-dynamic-enable.js
===================================================================
--- node-v10.11.0.orig/test/parallel/test-trace-events-dynamic-enable.js
+++ node-v10.11.0/test/parallel/test-trace-events-dynamic-enable.js
@@ -3,6 +3,7 @@
 const common = require('../common');
 
 common.skipIfInspectorDisabled();
+common.skipIfWorker(); // https://github.com/nodejs/node/issues/22767
 
 const assert = require('assert');
 const { performance } = require('perf_hooks');
Index: node-v10.11.0/test/common/index.js
===================================================================
--- node-v10.11.0.orig/test/common/index.js
+++ node-v10.11.0/test/common/index.js
@@ -625,6 +625,12 @@ function skipIf32Bits() {
   }
 }
 
+function skipIfWorker() {
+  if (!isMainThread) {
+    skip('This test only works on a main thread');
+  }
+}
+
 function getArrayBufferViews(buf) {
   const { buffer, byteOffset, byteLength } = buf;
 
@@ -743,6 +749,7 @@ module.exports = {
   skipIf32Bits,
   skipIfEslintMissing,
   skipIfInspectorDisabled,
+  skipIfWorker,
 
   get localhostIPv6() { return '::1'; },
 
Index: node-v10.11.0/test/common/index.mjs
===================================================================
--- node-v10.11.0.orig/test/common/index.mjs
+++ node-v10.11.0/test/common/index.mjs
@@ -45,6 +45,7 @@ const {
   expectsError,
   skipIfInspectorDisabled,
   skipIf32Bits,
+  skipIfWorker,
   getArrayBufferViews,
   getBufferSources,
   disableCrashOnUnhandledRejection,
@@ -95,6 +96,7 @@ export {
   expectsError,
   skipIfInspectorDisabled,
   skipIf32Bits,
+  skipIfWorker,
   getArrayBufferViews,
   getBufferSources,
   disableCrashOnUnhandledRejection,
