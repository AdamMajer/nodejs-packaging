commit 2008c9722fcf7591e39013691f303934b622df7b
Author: Akshay K <iit.akshay@gmail.com>
Date:   Fri Jul 30 18:46:45 2021 -0400

    http2: update handling of rst_stream with error code NGHTTP2_CANCEL
    
    The PR updates the handling of rst_stream frames and adds all streams
    to the pending list on receiving rst frames with the error code
    NGHTTP2_CANCEL.
    
    The changes will remove dependency on the stream state that may allow
    bypassing the checks in certain cases. I think a better solution is to
    delay streams in all cases if rst_stream is received for the cancel
    events.
    
    The rst_stream frames can be received for protocol/connection error as
    well it should be handled immediately. Adding streams to the pending
    list in such cases may cause errors.
    
    CVE-ID: CVE-2021-22930
    Refs: https://nvd.nist.gov/vuln/detail/CVE-2021-22930
    Backport-PR-URL: https://github.com/nodejs/node/pull/39659
    PR-URL: https://github.com/nodejs/node/pull/39622
    Refs: https://github.com/nodejs/node/pull/39423
    Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
    Reviewed-By: James M Snell <jasnell@gmail.com>
    Reviewed-By: Beth Griggs <bgriggs@redhat.com>

diff --git a/src/node_http2.cc b/src/node_http2.cc
index cc21373521..5156aa34df 100644
--- a/src/node_http2.cc
+++ b/src/node_http2.cc
@@ -2151,18 +2151,19 @@ void Http2Stream::SubmitRstStream(const uint32_t code) {
   CHECK(!this->IsDestroyed());
   code_ = code;
 
-  // If RST_STREAM frame is received and stream is not writable
-  // because it is busy reading data, don't try force purging it.
-  // Instead add the stream to pending stream list and process
-  // the pending data when it is safe to do so. This is to avoid
-  // double free error due to unwanted behavior of nghttp2.
-  // Ref:https://github.com/nodejs/node/issues/38964
-
-  // Add stream to the pending list if it is received with scope
+  auto is_stream_cancel = [](const uint32_t code) {
+    return code == NGHTTP2_CANCEL;
+  };
+
+  // If RST_STREAM frame is received with error code NGHTTP2_CANCEL,
+  // add it to the pending list and don't force purge the data. It is
+  // to avoids the double free error due to unwanted behavior of nghttp2.
+
+  // Add stream to the pending list only if it is received with scope
   // below in the stack. The pending list may not get processed
   // if RST_STREAM received is not in scope and added to the list
   // causing endpoint to hang.
-  if (session_->is_in_scope() && IsReading()) {
+  if (session_->is_in_scope() && is_stream_cancel(code)) {
       session_->AddPendingRstStream(id_);
       return;
   }
commit 9cd1f531034a91536f230be9647de865303d0e34
Author: Akshay K <iit.akshay@gmail.com>
Date:   Thu Aug 5 03:01:43 2021 -0400

    http2: add tests for cancel event while client is paused reading
    
    Backport-PR-URL: https://github.com/nodejs/node/pull/39659
    PR-URL: https://github.com/nodejs/node/pull/39622
    Refs: https://github.com/nodejs/node/pull/39423
    Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
    Reviewed-By: James M Snell <jasnell@gmail.com>
    Reviewed-By: Beth Griggs <bgriggs@redhat.com>

diff --git a/test/parallel/test-http2-cancel-while-client-reading.js b/test/parallel/test-http2-cancel-while-client-reading.js
new file mode 100644
index 0000000000..0605a02e11
--- /dev/null
+++ b/test/parallel/test-http2-cancel-while-client-reading.js
@@ -0,0 +1,36 @@
+'use strict';
+const common = require('../common');
+const fixtures = require('../common/fixtures');
+if (!common.hasCrypto) {
+  common.skip('missing crypto');
+}
+
+const http2 = require('http2');
+const key = fixtures.readKey('agent1-key.pem', 'binary');
+const cert = fixtures.readKey('agent1-cert.pem', 'binary');
+
+const server = http2.createSecureServer({ key, cert });
+
+let client_stream;
+
+server.on('stream', common.mustCall(function(stream) {
+  stream.resume();
+  stream.on('data', function(chunk) {
+    stream.write(chunk);
+    client_stream.pause();
+    client_stream.close(http2.constants.NGHTTP2_CANCEL);
+  });
+}));
+
+server.listen(0, function() {
+  const client = http2.connect(`https://localhost:${server.address().port}`,
+                               { rejectUnauthorized: false }
+  );
+  client_stream = client.request({ ':method': 'POST' });
+  client_stream.on('close', common.mustCall(() => {
+    client.close();
+    server.close();
+  }));
+  client_stream.resume();
+  client_stream.write(Buffer.alloc(1024 * 1024));
+});
